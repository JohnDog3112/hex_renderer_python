//format scaffolding

~&([^:]+)([^\n]+)
~

~$1$2
~&$1::

//generate scafolding

~&?([^:]+)::(\w+)(?: \{([^}]+)\})?,?

#[derive(Debug, Clone)]
#[pyclass(name="$2", extends=Py$1)]
struct $1$2;

#[pymethods]
impl $1$2 {
    #[new]
    fn new(&**$3) -> (Self, Py$1) {
        (
            Self,
            Py$1(
                $1::$2{
                    ** $3
                }
            )
        )
    }

    &&^*$1::$2 ($3) $3
}

//expand to arguments

&\*\*\s+(\w+:\s+[\w<>]+,?)

*&*$1 &**

//convert arguments (case sensitive)

\*&\*(\w+): ([A-Z][\w<>]+)

$1: Py$2

//clean up arguments

(\*&\*)|(\s*&\*\*\s*)



//expand parameters

(\s+)\*\*\s+(\w+):\s*([\w<>]+),?([^\n]*)

$1*&* $2: $3,
$1** $4

//remove excess
(\s+)\*\*\s+


//add wrapper (case sensitive)

(\s+)\*&\*\s(\w+):\s([A-Z][\w<>]+)

$1$2: $2.0



//clean up primitives

(\s+)\*&\*\s(\w+):\s\w+

$1$2



//setup getter/setters
([ \t]+)&&\^\*(\w+::\w+) ([^\)]+\))\s+(\w+:\s+[\w<>]+),?([^\n]*)

$1&*&$2 $3 $4
$1&&^*$2 $3 $5

//remove excess

\s+&&\^\*\w+::\w+ \([^\)]*\)[^\n]*


//format getter/setter stuff

(&\*&\w+::\w+\s+[^\)]+) (\w+): ([^_][\w<>]+)

$1$2:_$2


//Expand getters/setters

([ \t]+)&\*&(\w+::\w+) \(([^\)]+)\) (\w+): ([\w<>]+)

$1#[getter]
$1fn get_$4(self_: PyRef<'_, Self>) -> &^*&$5PyResult<Py<PyAny>> {
$1  let super_ = self_.as_ref();
$1  
$1  if let $2 { $3 } = &super_.0 {
$1     &*^ Py$5::new_py(*_$4)
$1  } else {
$1      unreachable!()
$1  }
$1}
$1
$1#[setter]
$1fn set_$4(mut self_: PyRefMut<'_, Self>, $4_inp: &*&Py$5) {
$1  let super_ = self_.as_mut();
$1
$1 if let $2 { $3 } = &mut super_.0 {
$1      *_$4 = $4_inp.0&^*$5;
$1  } else {
$1      unreachable!()
$1  }
$1}



//combination of last 4

&\^\*&(?:(?:([a-z]\w+)Py[^{]+)|(?:[A-Z]\w+(Py[^{]+)))|&\*&(?:(Py[A-Z])|(?:Py([a-z])))|(?:(.0)&\^\*[A-Z]\w+)|(?:.0&\^\*\w+())|&\*\^ (?:(Py[A-Z])|(?:[^\(]+\(([^\)]+)\)))

$1$2$3$4$5$6$7$8


//convert getter Py type

&\^\*&(?:(?:([a-z]\w+)Py[^{]+)|(?:[A-Z]\w+(Py[^{]+)))

$1$2


//convert setter Py type

&\*&(?:(Py[A-Z])|(?:Py([a-z])))

$1$2


//finish setters

(?:(.0)&\^\*[A-Z]\w+)|(?:.0&\^\*\w+())

$1$2


//finish setters

&\*\^ (?:(Py[A-Z])|(?:[^\(]+\(([^\)]+)\)))

$1$2