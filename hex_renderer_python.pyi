class PatternVariant(object):
	def __init__(self, direction: str, angle_sigs: str, great_spell: None | bool = None) -> None:
		...
	@property
	def direction(self) -> str:
		...
	def set_direction(self, direction: str) -> None:
		...
	@property
	def angle_sigs(self) -> str:
		...
	def set_angle_sigs(self, angle_sigs: str) -> None:
		...
	@property
	def great_spell(self) -> bool:
		...
	def set_great_spell(self, great_spell: bool) -> None:
		...
	...
class GridOptions(object):
	def __init__(self, line_thickness: float, pattern_options: GridPatternOptions, center_dot: Point) -> None:
		...
	@property
	def line_thickness(self) -> float:
		...
	@property
	def pattern_options(self) -> GridPatternOptions:
		...
	@property
	def center_dot(self) -> Point:
		...
	def with_line_thickness(self, line_thickness: float) -> GridOptions:
		...
	def with_pattern_options(self, pattern_options: GridPatternOptions) -> GridOptions:
		...
	def with_center_dot(self, center_dot: Point) -> GridOptions:
		...
	def __repr__(self) -> str:
		...
	...
class GridPatternOptions(object):
	class Changing(GridPatternOptions):
		def __init__(self, variations: list[tuple[Intersections, Lines]], intros: list[AngleSig], retros: list[AngleSig]) -> None:
			...
		@property
		def variations(self) -> list[tuple[Intersections, Lines]]:
			...
		@property
		def intros(self) -> list[AngleSig]:
			...
		@property
		def retros(self) -> list[AngleSig]:
			...
		def with_variations(self, variations: list[tuple[Intersections, Lines]]) -> GridPatternOptions.Changing:
			...
		def with_intros(self, intros: list[AngleSig]) -> GridPatternOptions.Changing:
			...
		def with_retros(self, retros: list[AngleSig]) -> GridPatternOptions.Changing:
			...
		...
	class Uniform(GridPatternOptions):
		def __init__(self, intersections: Intersections, lines: Lines) -> None:
			...
		@property
		def intersections(self) -> Intersections:
			...
		@property
		def lines(self) -> Lines:
			...
		def with_intersections(self, intersections: Intersections) -> GridPatternOptions.Uniform:
			...
		def with_lines(self, lines: Lines) -> GridPatternOptions.Uniform:
			...
		...
	def __repr__(self) -> str:
		...
	...
class EndPoint(object):
	class BorderedMatch(EndPoint):
		def __init__(self, match_radius: float, border: Marker) -> None:
			...
		@property
		def match_radius(self) -> float:
			...
		@property
		def border(self) -> Marker:
			...
		def with_match_radius(self, match_radius: float) -> EndPoint.BorderedMatch:
			...
		def with_border(self, border: Marker) -> EndPoint.BorderedMatch:
			...
		...
	class Match(EndPoint):
		def __init__(self, radius: float) -> None:
			...
		@property
		def radius(self) -> float:
			...
		def with_radius(self, radius: float) -> EndPoint.Match:
			...
		...
	class Point(EndPoint):
		def __init__(self, point: Point) -> None:
			...
		@property
		def point(self) -> Point:
			...
		def with_point(self, point: Point) -> EndPoint.Point:
			...
		...
	def __repr__(self) -> str:
		...
	...
class SquareGrid(Grid):
	def __init__(self, patterns: list[PatternVariant], max_width: int, max_scale: float, x_pad: float, y_pad: float) -> None:
		...
	...
class HexGrid(Grid):
	def __init__(self, patterns: list[PatternVariant], max_width: int) -> None:
		...
	...
class Grid(object):
	def draw_png(self, scale: float, options: GridOptions, padding: None | float = None) -> list[int]:
		...
	def draw_to_file(self, file_name: str, scale: float, options: GridOptions, padding: None | float = None) -> None:
		...
	def get_bound_scale(self, bound: tuple[float, float], options: float | GridOptions) -> float:
		...
	...
class CollisionOption(object):
	class OverloadedParallel(CollisionOption):
		def __init__(self, max_line: int, overload: OverloadOptions) -> None:
			...
		@property
		def max_line(self) -> int:
			...
		@property
		def overload(self) -> OverloadOptions:
			...
		def with_max_line(self, max_line: int) -> CollisionOption.OverloadedParallel:
			...
		def with_overload(self, overload: OverloadOptions) -> CollisionOption.OverloadedParallel:
			...
		...
	class ParallelLines(CollisionOption):
		def __init__(self) -> None:
			...
		...
	class MatchedDashes(CollisionOption):
		def __init__(self) -> None:
			...
		...
	class Dashes(CollisionOption):
		def __init__(self, color: Color) -> None:
			...
		@property
		def color(self) -> Color:
			...
		def with_color(self, color: Color) -> CollisionOption.Dashes:
			...
		...
	def __repr__(self) -> str:
		...
	...
class Intersections(object):
	class EndsAndMiddle(Intersections):
		def __init__(self, start: EndPoint, middle: Point, end: EndPoint) -> None:
			...
		@property
		def start(self) -> EndPoint:
			...
		@property
		def middle(self) -> Point:
			...
		@property
		def end(self) -> EndPoint:
			...
		def with_start(self, start: EndPoint) -> Intersections.EndsAndMiddle:
			...
		def with_middle(self, middle: Point) -> Intersections.EndsAndMiddle:
			...
		def with_end(self, end: EndPoint) -> Intersections.EndsAndMiddle:
			...
		...
	class UniformPoints(Intersections):
		def __init__(self, point: Point) -> None:
			...
		@property
		def point(self) -> Point:
			...
		def with_point(self, point: Point) -> Intersections.UniformPoints:
			...
		...
	class Nothing(Intersections):
		def __init__(self) -> None:
			...
		...
	def __repr__(self) -> str:
		...
	...
class AngleSig(object):
	def __init__(self, sigs: str) -> None:
		...
	def get_sigs(self) -> str:
		...
	def __repr__(self) -> str:
		...
	...
class Point(object):
	class Double(Point):
		def __init__(self, inner: Marker, outer: Marker) -> None:
			...
		@property
		def inner(self) -> Marker:
			...
		@property
		def outer(self) -> Marker:
			...
		def with_inner(self, inner: Marker) -> Point.Double:
			...
		def with_outer(self, outer: Marker) -> Point.Double:
			...
		...
	class Single(Point):
		def __init__(self, marker: Marker) -> None:
			...
		@property
		def marker(self) -> Marker:
			...
		def with_marker(self, marker: Marker) -> Point.Single:
			...
		...
	class None_(Point):
		def __init__(self) -> None:
			...
		...
	def __repr__(self) -> str:
		...
	...
class Marker(object):
	def __init__(self, color: Color, radius: float) -> None:
		...
	@property
	def color(self) -> Color:
		...
	@property
	def radius(self) -> float:
		...
	def with_color(self, color: Color) -> Marker:
		...
	def with_radius(self, radius: float) -> Marker:
		...
	def __repr__(self) -> str:
		...
	...
class Lines(object):
	class SegmentColors(Lines):
		def __init__(self, colors: list[Color], triangles: Triangle, collisions: CollisionOption) -> None:
			...
		@property
		def colors(self) -> list[Color]:
			...
		@property
		def triangles(self) -> Triangle:
			...
		@property
		def collisions(self) -> CollisionOption:
			...
		def with_colors(self, colors: list[Color]) -> Lines.SegmentColors:
			...
		def with_triangles(self, triangles: Triangle) -> Lines.SegmentColors:
			...
		def with_collisions(self, collisions: CollisionOption) -> Lines.SegmentColors:
			...
		...
	class Gradient(Lines):
		def __init__(self, colors: list[Color], segments_per_color: int, bent: bool) -> None:
			...
		@property
		def colors(self) -> list[Color]:
			...
		@property
		def segments_per_color(self) -> int:
			...
		@property
		def bent(self) -> bool:
			...
		def with_colors(self, colors: list[Color]) -> Lines.Gradient:
			...
		def with_segments_per_color(self, segments_per_color: int) -> Lines.Gradient:
			...
		def with_bent(self, bent: bool) -> Lines.Gradient:
			...
		...
	class Monocolor(Lines):
		def __init__(self, color: Color, bent: bool) -> None:
			...
		@property
		def color(self) -> Color:
			...
		@property
		def bent(self) -> bool:
			...
		def with_color(self, color: Color) -> Lines.Monocolor:
			...
		def with_bent(self, bent: bool) -> Lines.Monocolor:
			...
		...
	def __repr__(self) -> str:
		...
	...
class Triangle(object):
	class BorderStartMatch(Triangle):
		def __init__(self, match_radius: float, border: Marker) -> None:
			...
		@property
		def match_radius(self) -> float:
			...
		@property
		def border(self) -> Marker:
			...
		def with_match_radius(self, match_radius: float) -> Triangle.BorderStartMatch:
			...
		def with_border(self, border: Marker) -> Triangle.BorderStartMatch:
			...
		...
	class BorderMatch(Triangle):
		def __init__(self, match_radius: float, border: Marker) -> None:
			...
		@property
		def match_radius(self) -> float:
			...
		@property
		def border(self) -> Marker:
			...
		def with_match_radius(self, match_radius: float) -> Triangle.BorderMatch:
			...
		def with_border(self, border: Marker) -> Triangle.BorderMatch:
			...
		...
	class Match(Triangle):
		def __init__(self, radius: float) -> None:
			...
		@property
		def radius(self) -> float:
			...
		def with_radius(self, radius: float) -> Triangle.Match:
			...
		...
	class None_(Triangle):
		def __init__(self) -> None:
			...
		...
	def __repr__(self) -> str:
		...
	...
class OverloadOptions(object):
	"""
	Overload Options
	"""
	class MatchedDashes(OverloadOptions):
		def __init__(self) -> None:
			...
		...
	class LabeledDashes(OverloadOptions):
		def __init__(self, color: Color, label: Marker) -> None:
			...
		@property
		def color(self) -> Color:
			...
		@property
		def label(self) -> Marker:
			...
		def with_color(self, color: Color) -> OverloadOptions.LabeledDashes:
			...
		def with_label(self, label: Marker) -> OverloadOptions.LabeledDashes:
			...
		...
	class Dashes(OverloadOptions):
		def __init__(self, color: Color) -> None:
			...
		@property
		def color(self) -> Color:
			...
		def with_color(self, color: Color) -> OverloadOptions.Dashes:
			...
		...
	def __repr__(self) -> str:
		...
	...
class Color(object):
	"""
	Color!!
	"""
	def __init__(self, r: int, g: int, b: int, a: int) -> None:
		...
	@property
	def r(self) -> int:
		...
	@property
	def g(self) -> int:
		...
	@property
	def b(self) -> int:
		...
	@property
	def a(self) -> int:
		...
	def with_r(self, r: int) -> Color:
		...
	def with_g(self, g: int) -> Color:
		...
	def with_b(self, b: int) -> Color:
		...
	def with_a(self, a: int) -> Color:
		...
	def __repr__(self) -> str:
		...
	...